export module SkipList;

export import SkipList.Random;
export import SkipList.Arena;


#include <cassert>
import std;

// TODO : Use concept on the cmp
// TODO : learn lock-free programming
// TODO : write comment for left functions
// TODO : write test file
export
template <typename Key,typename Cmp>
class SkipList
{
private:
	struct Node;
public:

	SkipList(Cmp cmp,Arena * arena):arena_(arena),head_(NewNode(0,MaxHeight)),
		compare_(cmp),random_(RandomMin,RandomMax)
	{
		for(int i = 0;i<MaxHeight;i++)
		{
			head_->SetNext(i, nullptr);
		}
	}

	SkipList(const SkipList&) = delete;
	SkipList& operator=(const SkipList&) = delete;

	/**
	 * @param key : nothing compares equal to key is currently in the list
	 */
	void Insert(const Key& key);

	/**
	 * @return : return true if the list contains the key, false for otherwise
	 */
	bool Contains(const Key& key) const;

	/**
	 * @brief : Iteration over the contents of a skip list
	 * thread-safe : no
	 */
	class Iterator
	{
	public:
		/**
		 * @brief the return iterator is not valid yet
		 * @param list to init the iterator
		 */
		explicit Iterator(const SkipList * list):list_(list) {}

		bool Valid() const { return node_ != nullptr; }

		/**
		 * @return return the key at the current position
		 * @breif : Requires Valid() !
		 */
		const Key& key() const;

		/**
		 * @brief : move forward to next position
		 *			Requires Valid() !
		 */
		void Next();

		/**
		 * @brief : Advances to the previous position
		 *			Requires Valid() !
		 */
		void Prev();

		/**
		 * @brief : Advance to the first entry with a key >= target
		 *			Requires Valid() !
		 */
		void Seek(const Key& target);

		// Position at the first entry in list.
		// Final state of iterator is Valid() iff list is not empty.
		void SeekToFirst();

		// Position at the last entry in list.
		// Final state of iterator is Valid() iff list is not empty.
		void SeekToLast();
	private:
		const SkipList* list_;
		Node* node_{nullptr};
	};

private:
	static constexpr size_t MaxHeight = 12;

	// random range [min,max]
	// That means we can get four number 0,1,2,3
	// so the probability of get 0 is 1/4 what we will use in RandomHeight()
	static constexpr int RandomMin = 0;
	static constexpr int RandomMax = 3;

	Node* NewNode(const Key& key, int height);

	bool KeyIsAfterNode(const Key& key, Node* node) const;

	/**
	 * @brief : Return the earliest node that comes at or after key.
	 *			If prev is non-null, fills prev[level] with pointer to
	 *			previous node at "level" fro every level in [0..max_height-1]
	 * @return  : return nullptr if there is no such node
	 */
	Node* FindGreaterOrEqual(const Key& key, Node** prev) const;

	Node* FindLessThan(const Key& key) const;

	Node* FindLast() const;

	bool Equal(const Key& a, const Key& b) const { return (compare_(a, b) == 0); }

	inline int GetMaxHeight() const { return max_height_.load(std::memory_order_relaxed); }

	/**
	 * @brief : The probability of each height is (1/4)^(n-1) * (3/4)
	 */
	int RandomHeight();

	// arena must construct before head_!
	Arena* const arena_;
	Node* const head_;
	Cmp const compare_;
	Random random_;
	std::atomic<int> max_height_{1};
};

// Implementation details follow
template <typename Key, class Comparator>
struct SkipList<Key, Comparator>::Node
{
	Node(const Key& k) :key(k){}

	Key const key;

	Node * Next(int n)
	{
		assert(n >= 0);
		return next_[n].load(std::memory_order_acquire);
	}

	void SetNext(int n,Node *x)
	{
		assert(n >= 0);
		next_[n].store(x, std::memory_order_release);
	}

	Node * NoBarrierNext(int n)
	{
		assert(n >= 0);
		return next_[n].load(std::memory_order_relaxed);
	}

	void  NoBarrieSetNext(int n,Node * x)
	{
		assert(n >= 0);
		next_[n].store(x, std::memory_order_relaxed);
	}


private:
	/*
	 * The Node's multi-level index node impl
	 * Although it is [1] when declared ,but we will allocate more memory
	 * to make sure next_[n] is safe (n <= Node's height).
	 */
	std::atomic<Node*> next_[1];
};


template <typename Key, typename Cmp>
typename SkipList<Key, Cmp>::Node* SkipList<Key, Cmp>::NewNode(const Key& key, int height)
{
	// compute the memory the new node need, it should be const
	const size_t alloc_size = sizeof(Node) + sizeof(std::atomic<Node*>) * (height - 1);
	// the pointer's value (alloc memory) can't be changed
	char* const node_memory  = arena_->Allocate(alloc_size);
	// construct the new node on 'node_memory'
	Node* result = new (node_memory) Node(key);
	return result;
}

template <typename Key, typename Cmp>
bool SkipList<Key, Cmp>::KeyIsAfterNode(const Key& key, Node* n )const
{
	return (n != nullptr) && (compare_(n->key, key) < 0);
}

template <typename Key, typename Cmp>
typename SkipList<Key, Cmp>::Node* SkipList<Key, Cmp>::FindGreaterOrEqual(const Key& key, Node** prev) const
{
	// in fact , x means prev
	Node* x = head_;
	int level = GetMaxHeight() - 1;
	while(true)
	{
		Node* next = x->Next(level);
		if(KeyIsAfterNode(key,next))
		{
			// just change the prev ,don;t change the level
			x = next;
		}
		else
		{
			// store the new node's prev
			if (prev != nullptr) prev[level] = x;
			if(level == 0 )
			{
				return next;
			}
			// right range, go deeper to find the answer
			--level;
		}
	}
}

template <typename Key, typename Cmp>
typename SkipList<Key, Cmp>::Node* SkipList<Key, Cmp>::FindLessThan(const Key& key) const
{
	Node* x = head_;
	int level = GetMaxHeight() - 1;
	while (true) {
		assert(x == head_ || compare_(x->key, key) < 0);
		Node* next = x->Next(level);
		if (next == nullptr || compare_(next->key, key) >= 0) {
			// key > next->key || next == nullptr means reach the end of the list
			if (level == 0) {
				return x;
			}
			// Switch to next list
			--level;
		}
		else {
			x = next;
		}
	}
}

template <typename Key, typename Cmp>
typename SkipList<Key, Cmp>::Node* SkipList<Key, Cmp>::FindLast() const
{
	Node* x = head_;
	// range at the high level reduce the time
	int level = GetMaxHeight() - 1;
	while(true)
	{
		Node* next = x->Next(level);
		if(next == nullptr)
		{
			if (level == 0) return x;
			--level;
		}
		else
		{
			x = next;
		}
	}
}

template <typename Key, typename Cmp>
int SkipList<Key, Cmp>::RandomHeight()
{
	int height = 1;
	while(height < MaxHeight && random_.Rand() == 0)
	{
		height++;
	}
	assert(height > 0);
	assert(height <= MaxHeight);
	return height;
}

template <typename Key, typename Cmp>
void SkipList<Key, Cmp>::Insert(const Key& key)
{
	Node* prev[MaxHeight];
	Node* x = FindGreaterOrEqual(key, prev);

	assert(x == nullptr || !Equal(key, x->key));

	const int height = RandomHeight();

	if(height > GetMaxHeight() )
	{
		// the max_height_ should be updated
		for(int i = GetMaxHeight(); i < height;++i)
		{
			prev[i] = head_;
		}
		max_height_.store(height, std::memory_order_relaxed);
	}

	x = NewNode(key, height);
	for(int i = 0 ;i < height;++i)
	{
		// x use no-barrie ,because the fun not return yet, no one knows .
		x->NoBarrieSetNext(i, prev[i]->NoBarrierNext(i));
		prev[i]->SetNext(i, x);
	}
}

template <typename Key, typename Cmp>
bool SkipList<Key, Cmp>::Contains(const Key& key) const
{
	Node* find_result = FindGreaterOrEqual(key, nullptr);
	if(find_result != nullptr && Equal(key,find_result->key))
	{
		return true;
	}
	return false;
}

template <typename Key, typename Cmp>
const Key& SkipList<Key, Cmp>::Iterator::key() const
{
	assert(Valid());
	return node_->key;
}

template <typename Key, typename Cmp>
void SkipList<Key, Cmp>::Iterator::Next()
{
	assert(Valid());
	node_ = node_->Next(0);
}

template <typename Key, typename Cmp>
void SkipList<Key, Cmp>::Iterator::Prev()
{
	assert(Valid());
	node_ = list_->FindLessThan(node_->key);
	// head doesn't contain any key
	if(node_ == list_->head_)
	{
		node_ = nullptr;
	}
}

template <typename Key, typename Cmp>
void SkipList<Key, Cmp>::Iterator::Seek(const Key& target)
{
	node_ = list_->FindGreaterOrEqual(target,nullptr);
}

template<typename Key, typename Cmp>
void SkipList<Key, Cmp>::Iterator::SeekToFirst()
{
	node_ = list_->head_->Next(0);
}

template <typename Key, typename Cmp>
void SkipList<Key, Cmp>::Iterator::SeekToLast()
{
	node_ = list_->FindLast();
	if(node_ == list_->head_)
	{
		node_ = nullptr;
	}
}

